output$airtable = DT::renderDataTable({
# XML 檔案網址
tmsp$url <- "http://opendata2.epa.gov.tw/AQX.xml"
# 下載並解析 XML 檔案
tmsp$xml.doc <- xmlParse(tmsp$url)
# 取出 XML 的根節點
tmsp$xml.top <- xmlRoot(tmsp$xml.doc)
# 查看節點名稱
# xmlName(xml.top)
# 查看子節點數量
# xmlSize(xml.top)
# 查看子結點
# names(xml.top[[1]])
# 依照名稱取出節點
(tmsp$xml.leaf <- tmsp$xml.top[[1]][["PSI"]])
# 取出節點內的資料
(tmsp$xml.leaf.value <- xmlValue(tmsp$xml.leaf))
#
# XML 轉為 Data Frame
#
tmsp$xml.df <- xmlToDataFrame(tmsp$xml.top)
head(tmsp$xml.df)
# 從因子轉為數值資料
tmsp$xml.df$PSI <- as.numeric(levels(tmsp$xml.df$PSI))[as.integer(tmsp$xml.df$PSI)]
# str(xml.df$PSI)
# hist(xml.df$PSI)
tmsp$tmsp$xmldf = tmsp$xml.df[tmsp$xml.df$PSI>50,]
DT::datatable(tmsp$tmsp$xmldf , options = list(pageLength = 25))
})
}
shinyApp(ui, server)
library("shiny")
library("XML")
library("DT")
ui = shinyUI(
fluidPage(
titlePanel("Elderly City"),
tabsetPanel(
tabPanel("空氣污染",
h2( "空氣污染" ),
sidebarLayout(
sidebarPanel(
submitButton("Submit", icon("refresh"), width = "40%")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
DT::dataTableOutput("airtable")
),
tabPanel("Plot"
)
)
)
)
),
tabPanel("天氣溫度"
),
tabPanel("進修機構"
),
tabPanel("公共運輸"
),
tabPanel("醫院診所"
),
tabPanel("視覺化分析"
)
)
)
)
server = function(input, output) {
# tem
tmsp = reactiveValues()
output$airtable = DT::renderDataTable({
# XML 檔案網址
tmsp$url <- "http://opendata2.epa.gov.tw/AQX.xml"
# 下載並解析 XML 檔案
tmsp$xml.doc <- xmlParse(tmsp$url)
# 取出 XML 的根節點
tmsp$xml.top <- xmlRoot(tmsp$xml.doc)
# 查看節點名稱
# xmlName(xml.top)
# 查看子節點數量
# xmlSize(xml.top)
# 查看子結點
# names(xml.top[[1]])
# 依照名稱取出節點
(tmsp$xml.leaf <- tmsp$xml.top[[1]][["PSI"]])
# 取出節點內的資料
(tmsp$xml.leaf.value <- xmlValue(tmsp$xml.leaf))
#
# XML 轉為 Data Frame
#
tmsp$xml.df <- xmlToDataFrame(tmsp$xml.top)
head(tmsp$xml.df)
# 從因子轉為數值資料
tmsp$xml.df$PSI <- as.numeric(levels(tmsp$xml.df$PSI))[as.integer(tmsp$xml.df$PSI)]
# str(xml.df$PSI)
# hist(xml.df$PSI)
tmsp$xmldf = tmsp$xml.df[tmsp$xml.df$PSI>50,]
DT::datatable(tmsp$xmldf , options = list(pageLength = 25))
})
}
shinyApp(ui, server)
library("shiny")
library("XML")
library("DT")
ui = shinyUI(
fluidPage(
titlePanel("Elderly City"),
tabsetPanel(
tabPanel("空氣污染",
h2( "空氣污染" ),
sidebarLayout(
sidebarPanel(
submitButton("Submit", icon("refresh"), width = "40%")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
DT::dataTableOutput("airtable")
),
tabPanel("Plot"
)
)
)
)
),
tabPanel("天氣溫度"
),
tabPanel("進修機構"
),
tabPanel("公共運輸"
),
tabPanel("醫院診所"
),
tabPanel("視覺化分析"
)
)
)
)
server = function(input, output) {
# tem
tmsp = reactiveValues()
output$airtable = DT::renderDataTable({
# XML 檔案網址
tmsp$url <- "http://opendata2.epa.gov.tw/AQX.xml"
# 下載並解析 XML 檔案
tmsp$xml.doc <- xmlParse(tmsp$url)
# 取出 XML 的根節點
tmsp$xml.top <- xmlRoot(tmsp$xml.doc)
# 查看節點名稱
# xmlName(xml.top)
# 查看子節點數量
# xmlSize(xml.top)
# 查看子結點
# names(xml.top[[1]])
# 依照名稱取出節點
(tmsp$xml.leaf <- tmsp$xml.top[[1]][["PSI"]])
# 取出節點內的資料
(tmsp$xml.leaf.value <- xmlValue(tmsp$xml.leaf))
#
# XML 轉為 Data Frame
#
tmsp$xml.df <- xmlToDataFrame(tmsp$xml.top)
head(tmsp$xml.df)
# 從因子轉為數值資料
tmsp$xml.df$PSI <- as.numeric(levels(tmsp$xml.df$PSI))[as.integer(tmsp$xml.df$PSI)]
# str(xml.df$PSI)
# hist(xml.df$PSI)
DT::datatable(tmsp$xml.df$PSI , options = list(pageLength = 25))
})
}
shinyApp(ui, server)
library("shiny")
library("XML")
library("DT")
ui = shinyUI(
fluidPage(
titlePanel("Elderly City"),
tabsetPanel(
tabPanel("空氣污染",
h2( "空氣污染" ),
sidebarLayout(
sidebarPanel(
submitButton("Submit", icon("refresh"), width = "40%")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
DT::dataTableOutput("airtable")
),
tabPanel("Plot"
)
)
)
)
),
tabPanel("天氣溫度"
),
tabPanel("進修機構"
),
tabPanel("公共運輸"
),
tabPanel("醫院診所"
),
tabPanel("視覺化分析"
)
)
)
)
server = function(input, output) {
# tem
tmsp = reactiveValues()
output$airtable = DT::renderDataTable({
# XML 檔案網址
tmsp$url <- "http://opendata2.epa.gov.tw/AQX.xml"
# 下載並解析 XML 檔案
tmsp$xml.doc <- xmlParse(tmsp$url)
# 取出 XML 的根節點
tmsp$xml.top <- xmlRoot(tmsp$xml.doc)
# 依照名稱取出節點
(tmsp$xml.leaf <- tmsp$xml.top[[1]][["PSI"]])
# 取出節點內的資料
(tmsp$xml.leaf.value <- xmlValue(tmsp$xml.leaf))
#
# XML 轉為 Data Frame
#
tmsp$xml.df <- xmlToDataFrame(tmsp$xml.top)
DT::datatable(tmsp$xml.df , options = list(pageLength = 25))
})
}
shinyApp(ui, server)
library("shiny")
library("XML")
library("DT")
ui = shinyUI(
fluidPage(
titlePanel("Elderly City"),
tabsetPanel(
tabPanel("空氣污染",
h2( "空氣污染" ),
sidebarLayout(
sidebarPanel(
h5( "CSV" ),
downloadButton('ecairdlcsv', 'Download'),
submitButton("Refresh", icon("refresh"), width = "40%")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
DT::dataTableOutput("airtable")
),
tabPanel("Plot"
)
)
)
)
),
tabPanel("天氣溫度"
),
tabPanel("進修機構"
),
tabPanel("公共運輸"
),
tabPanel("醫院診所"
),
tabPanel("視覺化分析"
)
)
)
)
server = function(input, output) {
# tem
tmsp = reactiveValues()
output$airtable = DT::renderDataTable({
# XML 檔案網址
tmsp$url <- "http://opendata2.epa.gov.tw/AQX.xml"
# 下載並解析 XML 檔案
tmsp$xml.doc <- xmlParse(tmsp$url)
# 取出 XML 的根節點
tmsp$xml.top <- xmlRoot(tmsp$xml.doc)
# 依照名稱取出節點
(tmsp$xml.leaf <- tmsp$xml.top[[1]][["PSI"]])
# 取出節點內的資料
(tmsp$xml.leaf.value <- xmlValue(tmsp$xml.leaf))
#
# XML 轉為 Data Frame
#
tmsp$xml.df <- xmlToDataFrame(tmsp$xml.top)
DT::datatable(tmsp$xml.df , options = list(pageLength = 25))
})
output$ecairdlcsv = downloadHandler(
filename = function() {
paste( "ecair", '.csv', sep = '')
tmsp$sdc = as.character(Sys.time())
tmsp$sdc1t = gsub( ":", " ", tmsp$sdc)
tmsp$sdc2t = gsub( "-", " ", tmsp$sdc1t)
tmsp$sdc3t = paste(strsplit( tmsp$sdc2t ,split = " ", fixed = T)[[1]],collapse="")
paste( "ecair_", tmsp$sdc3t, ".csv", sep = '')
},
content = function(file) {
# XML 檔案網址
tmsp$url <- "http://opendata2.epa.gov.tw/AQX.xml"
# 下載並解析 XML 檔案
tmsp$xml.doc <- xmlParse(tmsp$url)
# 取出 XML 的根節點
tmsp$xml.top <- xmlRoot(tmsp$xml.doc)
# 依照名稱取出節點
(tmsp$xml.leaf <- tmsp$xml.top[[1]][["PSI"]])
# 取出節點內的資料
(tmsp$xml.leaf.value <- xmlValue(tmsp$xml.leaf))
#
# XML 轉為 Data Frame
#
tmsp$xml.df <- xmlToDataFrame(tmsp$xml.top)
write.csv( tmsp$xml.df, file = file, quote = FALSE, sep = ",", row.names = FALSE)
})
}
shinyApp(ui, server)
library("shiny")
library("XML")
library("DT")
ui = shinyUI(
fluidPage(
titlePanel("Elderly City"),
tabsetPanel(
tabPanel("空氣污染",
h2( "空氣污染" ),
sidebarLayout(
sidebarPanel(
h5( "CSV" ),
downloadButton('ecairdlcsv', 'Download', width = "100%")
# ,
# submitButton("Refresh", icon("refresh"), width = "100%")
),
mainPanel(
tabsetPanel(
tabPanel("Table",
DT::dataTableOutput("airtable")
),
tabPanel("Plot"
),
tabPanel("每日提醒"
)
)
)
)
),
tabPanel("天氣溫度"
),
tabPanel("進修機構"
),
tabPanel("公共運輸"
),
tabPanel("醫院診所"
),
tabPanel("視覺化分析"
)
)
)
)
server = function(input, output) {
# tem
tmsp = reactiveValues()
output$airtable = DT::renderDataTable({
# XML 檔案網址
tmsp$url <- "http://opendata2.epa.gov.tw/AQX.xml"
# 下載並解析 XML 檔案
tmsp$xml.doc <- xmlParse(tmsp$url)
# 取出 XML 的根節點
tmsp$xml.top <- xmlRoot(tmsp$xml.doc)
# 依照名稱取出節點
(tmsp$xml.leaf <- tmsp$xml.top[[1]][["PSI"]])
# 取出節點內的資料
(tmsp$xml.leaf.value <- xmlValue(tmsp$xml.leaf))
#
# XML 轉為 Data Frame
#
tmsp$xml.df <- xmlToDataFrame(tmsp$xml.top)
DT::datatable(tmsp$xml.df , options = list(pageLength = 25))
})
output$ecairdlcsv = downloadHandler(
filename = function() {
paste( "ecair", '.csv', sep = '')
tmsp$sdc = as.character(Sys.time())
tmsp$sdc1t = gsub( ":", " ", tmsp$sdc)
tmsp$sdc2t = gsub( "-", " ", tmsp$sdc1t)
tmsp$sdc3t = paste(strsplit( tmsp$sdc2t ,split = " ", fixed = T)[[1]],collapse="")
paste( "ecair_", tmsp$sdc3t, ".csv", sep = '')
},
content = function(file) {
# XML 檔案網址
tmsp$url <- "http://opendata2.epa.gov.tw/AQX.xml"
# 下載並解析 XML 檔案
tmsp$xml.doc <- xmlParse(tmsp$url)
# 取出 XML 的根節點
tmsp$xml.top <- xmlRoot(tmsp$xml.doc)
# 依照名稱取出節點
(tmsp$xml.leaf <- tmsp$xml.top[[1]][["PSI"]])
# 取出節點內的資料
(tmsp$xml.leaf.value <- xmlValue(tmsp$xml.leaf))
#
# XML 轉為 Data Frame
#
tmsp$xml.df <- xmlToDataFrame(tmsp$xml.top)
write.csv( tmsp$xml.df, file = file, quote = FALSE, sep = ",", row.names = FALSE)
})
}
shinyApp(ui, server)
# install.packages("shiny")
library("shiny")
library("shiny")
ui = shinyUI(
fluidPage(
titlePanel(" Hello, World! - Shiny")
)
)
server = function(input, output) {
# tem
tmsp = reactiveValues()
}
shinyApp(ui = ui, server = server)
ls()
install.packages(c("MASS", "survival"))
install.packages("shiny.semantic")
?file.path
ll = 1:13
ll1 = 13:1
112 = 1:13
ll2 = 1:13
ls()
ldf = data.frame(ll,ll1,ll2)
ldf
l3ist = list(ll,ll1,ll2,ldf)
class(l3ist)
View(l3ist)
View(l3ist)
?Reduce
a = 10
a
getOption("repos")
knitr::opts_chunk$set(echo = FALSE)
summary(cars)
plot(pressure)
install.packages("knitr")
install.packages("knitr")
library("knitr")
tinytex::install_prebuilt()
install.packages(tinytex)
install.packages("tinytex")
install.packages("tinytex")
library("tinytex")
tinytex::install_prebuilt()
setwd("~/")
setwd("~/CodeWork/rsapce/alw1")
knitr::opts_chunk$set(echo = FALSE)
knitr::include_graphics("c1.png")
knitr::opts_chunk$set(echo = FALSE)
knitr::include_graphics("c1.png")
summary(cars)
plot(pressure)
install.packages("knitr")
install.packages("knitr")
t=0:10
t
z= exp(-t/2)
z
length(z)
length(t)
PLT = c( "Py1", "Py2", "Py3", "Java2", "C++", "C", "Go")
Runtime_ms = c( 139, 707, 64, 2, 11, 116, 12)
Memory_Usage_MB = c( 15.2, 14.9, 15.2, 46.1, 10.8, 6.5, 4.4)
plot(PLT, Runtime_ms)
title("Runtime")
R
Runtime_ms
Memory_Usage_MB
PLT
data.frame(PLT, Runtime_ms, Memory_Usage_MB)
ggplot(data, aes(x=factor(Runtime_ms), y=Memory_Usage_MB, colour=PLT ,group=PLT )) +
geom_line(size=2)
install.packages("ggplot")
library("ggplot")
library("ggplot2")
install.packages("ggplot2")
library("ggplot2")
ggplot(data, aes(x=factor(Runtime_ms), y=Memory_Usage_MB, colour=PLT ,group=PLT )) +
geom_line(size=2)
ggplot(data, aes(x = PLT , y = Runtime_ms)) + geom_line() + geom_point()
PLT = c( "Py1", "Py2", "Py3", "Java2", "C++", "C", "Go")
Runtime_ms = c( 139, 707, 64, 2, 11, 116, 12)
Memory_Usage_MB = c( 15.2, 14.9, 15.2, 46.1, 10.8, 6.5, 4.4)
data = data.frame(PLT, Runtime_ms, Memory_Usage_MB)
ggplot(data, aes(x = PLT , y = Runtime_ms)) + geom_line() + geom_point()
ggplot(data, aes(x = PLT , y = Runtime_ms))
ls
ggplot(data, aes(x = PLT , y = Runtime_ms))
ggplot(data, aes(x = data$PLT , y = data$Runtime_ms))
data
data$PLT
ggplot(data, aes(x = PLT, y = Runtime_ms, group = 1)) + geom_line()
plot(data)
ggplot(data, aes(x = PLT, y = Runtime_ms, group = 1)) + geom_line()
ggplot(data, aes(x = PLT , y = Runtime_ms))
ggplot(data, aes(x = PLT, y = Runtime_ms, group = 1)) + geom_line()
ggplot(data, aes(x = PLT, y = Runtime_ms, group = 1)) + geom_line()
PLT = c( "Py1", "Py2", "Py3", "Java2", "C++", "C", "Go")
Runtime_ms = c( 139, 707, 64, 2, 11, 116, 12)
Memory_Usage_MB = c( 15.2, 14.9, 15.2, 46.1, 10.8, 6.5, 4.4)
data = data.frame(PLT, Runtime_ms, Memory_Usage_MB)
ggplot(data, aes(x = PLT, y = Runtime_ms, colour = supp)) +
geom_line(linetype = "dashed",size=3) +
geom_point(shape = 22, size = 5, fill = "white")
